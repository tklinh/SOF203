/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.fpoly.pikachu;

import java.awt.Color;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.BorderFactory;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JPanel;
import javax.swing.UIManager;
import javax.swing.border.LineBorder;

/**
 *
 * @author Kali
 */
public class FrmMain extends javax.swing.JFrame {

    private final int COLUMNS = 8;
    private final int ROWS = 8;
    private final int ICON_WIDTH = 48;
    private final int ICON_HEIGHT = 48;
    
    private JButton firstButton = null;
    
    private Map<JButton, PikachuButton> pikachuButtonList = new HashMap<>();
    
    private JPanel pnlMain = new JPanel(new GridLayout(ROWS, COLUMNS));
    private List<Integer> iconIndexList = new ArrayList<>();
    /**
     * Creates new form FrmMain
     */
    public FrmMain() {
        initComponents();
        
        generateIconIndexList();
        
        ClassLoader classLoader = this.getClass().getClassLoader();
        
        int panelWidth = (ICON_WIDTH + 10) * COLUMNS;
        int panelHeight = (ICON_HEIGHT + 10) * ROWS;        
        pnlMain.setSize(panelWidth, panelHeight);
        
        for (int i = 0; i < ROWS; i++) {
            for (int j = 0; j < COLUMNS; j++) {
                int randomIndex = (int)((Math.random() * iconIndexList.size()));
                randomIndex = iconIndexList.remove(randomIndex);
                URL imagePath = classLoader.getResource("images/" + randomIndex + ".png");
                Image imgPikachu = new ImageIcon(imagePath).getImage();
                Icon iconPikachu = new ImageIcon(imgPikachu.getScaledInstance(ICON_WIDTH, ICON_HEIGHT, imgPikachu.SCALE_SMOOTH));
        
                JButton button = new JButton();
                button.setIcon(iconPikachu);
                
                button.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        pikachuSelectedHandler(e);
                    }
                });
                
                pnlMain.add(button);
                PikachuButton pikachuButton = new PikachuButton(button, j, i, randomIndex);
                pikachuButtonList.put(button, pikachuButton);
            }
        }
        
        this.add(pnlMain);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 437, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 353, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmMain().setVisible(true);
            }
        });
    }
    
    private void generateIconIndexList() {
        for (int i = 0; i < ROWS * COLUMNS / 2; i++) {
            int randomIndex = (int) ((Math.random() * (20 - 1)) + 1);
            iconIndexList.add(randomIndex);
            iconIndexList.add(randomIndex);
        }
    }
    
    private void pikachuSelectedHandler(ActionEvent e) {
        if (e.getSource().getClass() == JButton.class) {            
            JButton selectedButton = (JButton)e.getSource();
            
            PikachuButton pikachuButton = pikachuButtonList.get(selectedButton);
            System.out.println("Cols: " + pikachuButton.getColIndex() + " - Rows: " + pikachuButton.getRowIndex()+ " - icon: " + pikachuButton.getIconIndex());
            
            if (firstButton == null) {
                firstButton = selectedButton;
                firstButton.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createLineBorder(Color.red), UIManager.getLookAndFeel().getDefaults().getBorder("TextField.border")));
            } else {
                int firstButtonIconIndex = pikachuButtonList.get(firstButton).getIconIndex();
                int secondButtonIconIndex = pikachuButtonList.get(selectedButton).getIconIndex();
               
                if (firstButton != selectedButton && firstButtonIconIndex == secondButtonIconIndex) {
                    firstButton.setVisible(false);
                    selectedButton.setVisible(false);
                } else {
                    firstButton.setBorder(UIManager.getLookAndFeel().getDefaults().getBorder("TextField.border"));
                }
                
                firstButton = null;
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
